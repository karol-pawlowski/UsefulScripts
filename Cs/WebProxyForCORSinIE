using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
using System.Web.Configuration;
using System.Web.Mvc;

namespace ItWorks.Web
{
    public class CorsProxyProcessor
    {
        protected string ApiUrl;

        public CorsProxyProcessor() { }

        public void ProcessRequest(HttpContextBase context)
        {
            var baseUri = new Uri(ApiUrl);
            var relativeUri = new Uri(context.Request.Url.PathAndQuery, UriKind.Relative);

            var request = WebRequest.CreateHttp(new Uri(baseUri, relativeUri));
            context.Request.CopyHeadersTo(request);
            request.Method = context.Request.HttpMethod;
            request.ContentType = context.Request.ContentType;
            request.UserAgent = context.Request.UserAgent;

            if (context.Request.AcceptTypes != null)
                request.Accept = string.Join(";", context.Request.AcceptTypes);

            if (context.Request.UrlReferrer != null)
                request.Referer = context.Request.UrlReferrer.ToString();

            if (!context.Request.HttpMethod.Equals("GET", StringComparison.Ordinal))
                context.Request.InputStream.CopyTo(request.GetRequestStream());

            try
            {
                var response = (HttpWebResponse)request.GetResponse();

                response.CopyHeadersTo(context.Response);
                context.Response.ContentType = response.ContentType;
                context.Response.StatusCode = (int)response.StatusCode;
                context.Response.StatusDescription = response.StatusDescription;

                var stream = response.GetResponseStream();
                if (stream != null && response.ContentLength > 0)
                {
                    stream.CopyTo(context.Response.OutputStream);
                    stream.Flush();
                }
            }
            catch (WebException ex)
            {
                var response = ex.Response as HttpWebResponse;

                if (response != null)
                {
                    context.Response.StatusCode = (int)response.StatusCode;
                    context.Response.StatusDescription = response.StatusDescription;
                    response.CopyHeadersTo(context.Response);
                    var stream = response.GetResponseStream();
                    if (stream != null)
                        stream.CopyTo(context.Response.OutputStream);

                    return;
                }

                context.Response.StatusCode = 501;
                context.Response.StatusDescription = ex.Status.ToString();
                var msg = Encoding.ASCII.GetBytes(ex.Message);
                context.Response.OutputStream.Write(msg, 0, msg.Length);
                context.Response.Close();
            }
            catch (Exception exception)
            {
                context.Response.StatusCode = 501;
                context.Response.StatusDescription = "Failed to call proxied URL.";
                var msg = Encoding.ASCII.GetBytes(exception.Message);
                context.Response.OutputStream.Write(msg, 0, msg.Length);
                context.Response.Close();
            }
        }
    }

    public static class Extensions
    {
        private static readonly string[] IgnoredRequestHeaders = new[]
        {
            "Connection", "Content-Length", "Host", "Content-Type", "Accept", "Referer", "UrlReferer", "UserAgent",
            "User-Agent"
        };
        private static readonly string[] IgnoredResponseHeaders = new[]
        {
            "Connection", "Content-Length", "Server", "Content-Type", "X-AspNet-Version"
        };

        public static void CopyHeadersTo(this HttpRequestBase source, HttpWebRequest destination)
        {
            var cookieContainer = new CookieContainer();
            destination.CookieContainer = cookieContainer;
            foreach (string name in source.Headers)
            {
                if (IgnoredRequestHeaders.Contains(name))
                    continue;
                var value = source.Headers[name];
                if (string.IsNullOrEmpty(value))
                    continue;
                destination.Headers.Add(name, value);
            }
        }

        public static void CopyHeadersTo(this HttpWebResponse source, HttpResponseBase destination)
        {
            foreach (string name in source.Headers)
            {
                if (IgnoredResponseHeaders.Contains(name))
                    continue;
                var value = source.Headers[name];
                if (string.IsNullOrEmpty(value))
                    continue;
                destination.AddHeader(name, value);
            }
        }
    }
}
